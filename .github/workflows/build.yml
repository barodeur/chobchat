name: build
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  setup:
    runs-on: ubuntu-20.04
    env:
      WORKING_DIRECTORY: ./mobile
      HOMESERVER_URL: ${{ secrets.HOMESERVER_URL }}
    outputs:
      package_version: ${{ steps.retrieve-version.outputs.package_version }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Get Package Version
        id: retrieve-version
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          PKG_VERSION=$(jq -r .version package.json)
          echo "::set-output name=package_version::$PKG_VERSION"
  build-linux:
    runs-on: ubuntu-20.04
    needs: setup
    env:
      WORKING_DIRECTORY: ./mobile
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
      HOMESERVER_URL: ${{ secrets.HOMESERVER_URL }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install node dependencies
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: yarn install --frozen-lockfile
      - name: Build Application
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: yarn re:build && yarn electron:build && yarn dist:linux
      - name: Upload armhf AppImage
        uses: actions/upload-artifact@v2
        with:
          name: ChobChat-${{ env._PACKAGE_VERSION }}-armv7l.AppImage
          path: ./mobile/dist/ChobChat-${{ env._PACKAGE_VERSION }}-armv7l.AppImage
          if-no-files-found: error
      - name: Upload x64 AppImage
        uses: actions/upload-artifact@v2
        with:
          name: ChobChat-${{ env._PACKAGE_VERSION }}.AppImage
          path: ./mobile/dist/ChobChat-${{ env._PACKAGE_VERSION }}.AppImage
          if-no-files-found: error
      - name: Upload latest auto-update artifact
        uses: actions/upload-artifact@v2
        with:
          name: latest-linux.yml
          path: ./mobile/dist/latest-linux.yml
          if-no-files-found: error
  build-macos:
    runs-on: macos-latest
    needs: setup
    env:
      WORKING_DIRECTORY: ./mobile
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PWD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PWD: ${{ secrets.APPLE_ID_PWD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      HOMESERVER_URL: ${{ secrets.HOMESERVER_URL }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install node dependencies
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: yarn install --frozen-lockfile
      - name: Setup keychain
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p $KEYCHAIN_PWD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PWD build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PWD build.keychain
      - name: Build Application
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: yarn re:build && yarn electron:build && yarn dist:macos
      - name: Upload DMG
        uses: actions/upload-artifact@v2
        with:
          name: ChobChat-${{ env._PACKAGE_VERSION }}-universal.dmg
          path: ./mobile/dist/ChobChat-${{ env._PACKAGE_VERSION }}-universal.dmg
          if-no-files-found: error
      - name: Upload MAC ZIP
        uses: actions/upload-artifact@v2
        with:
          name: ChobChat-${{ env._PACKAGE_VERSION }}-universal-mac.zip
          path: ./mobile/dist/ChobChat-${{ env._PACKAGE_VERSION }}-universal-mac.zip
          if-no-files-found: error
      - name: Upload latest auto-update artifact
        uses: actions/upload-artifact@v2
        with:
          name: latest-mac.yml
          path: ./mobile/dist/latest-mac.yml
          if-no-files-found: error
  call-release:
    runs-on: ubuntu-20.04
    needs: [setup, build-linux, build-macos]
    env:
      WORKING_DIRECTORY: ./mobile
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
    steps:
      - uses: ./.github/workflows/release.yml
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          build_run_id: ${{ github.run_id }}
